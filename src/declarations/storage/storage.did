type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: func () -> ();
                              token: StreamingCallbackToken__1;
                            };};
type StreamingCallbackToken__1 = 
 record {
   headers: vec HeaderField;
   id: ID__1;
   index: nat;
   sha256: opt vec nat8;
 };
type StreamingCallbackToken = 
 record {
   headers: vec HeaderField;
   id: ID__1;
   index: nat;
   sha256: opt vec nat8;
 };
type StreamingCallbackHttpResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken__1;
 };
type StorageBucket = 
 service {
   commitUpload:
    (record {
       batchId: nat;
       chunkIds: vec nat;
       headers: vec HeaderField__1;
     }) -> ();
   getUsedMemorySize: () -> (nat);
   getVersion: () -> (text) query;
   http_request: (HttpRequest) -> (HttpResponse) query;
   http_request_streaming_callback: (StreamingCallbackToken) ->
    (StreamingCallbackHttpResponse) query;
   initUpload: (AssetKey) -> (record {batchId: nat;});
   uploadChunk: (Chunk) -> (record {chunkId: nat;});
 };
type ID__1 = text;
type ID = text;
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField__1 = 
 record {
   text;
   text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type Chunk = 
 record {
   batchId: nat;
   content: blob;
 };
type AssetKey = 
 record {
   fileSize: nat;
   id: ID;
   name: text;
   parentId: opt ID;
 };
service : (principal) -> StorageBucket
