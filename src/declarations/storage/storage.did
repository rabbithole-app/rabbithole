type UploadChunk = record {chunkId: nat32;};
type Time = int;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback:
                               func (StreamingCallbackToken__1) ->
                                (StreamingCallbackHttpResponse__1) query;
                              token: StreamingCallbackToken__1;
                            };};
type StreamingCallbackToken__1 = 
 record {
   headers: vec HeaderField;
   id: ID__2;
   index: nat;
   sha256: opt blob;
 };
type StreamingCallbackToken = 
 record {
   headers: vec HeaderField;
   id: ID__2;
   index: nat;
   sha256: opt blob;
 };
type StreamingCallbackHttpResponse__1 = 
 record {
   body: blob;
   token: opt StreamingCallbackToken__1;
 };
type StreamingCallbackHttpResponse = 
 record {
   body: blob;
   token: opt StreamingCallbackToken__1;
 };
type Storage = 
 service {
   batchAlive: (nat) -> ();
   commitUpload: (CommitBatch, bool) -> (Result_1);
   delete: (ID__3) -> ();
   getAssetsTotalSize: () -> (nat) query;
   getCertTree: () -> (RawTree) query;
   getChunk: (nat32) -> (blob) query;
   getChunks: (ID__3) -> (Result) query;
   getHeapSize: () -> (nat) query;
   getMaxLiveSize: () -> (nat) query;
   getMemorySize: () -> (nat) query;
   getStableMemorySize: () -> (nat);
   getUsedMemorySize: () -> (nat);
   http_request: (HttpRequest) -> (HttpResponse) query;
   http_request_streaming_callback: (StreamingCallbackToken) ->
    (StreamingCallbackHttpResponse) query;
   initUpload: (AssetKey) -> (InitUpload);
   uploadChunk: (Chunk) -> (UploadChunk);
   version: () -> (nat) query;
 };
type Result_1 = 
 variant {
   err: CommitUploadError;
   ok;
 };
type Result = 
 variant {
   err: variant {notFound;};
   ok: AssetInfo;
 };
type RawTree = 
 variant {
   subtree: vec record {
                  Key;
                  RawTree;
                };
   value: blob;
 };
type Key = blob;
type InitUpload = record {batchId: nat;};
type ID__3 = text;
type ID__2 = text;
type ID__1 = text;
type ID = text;
type HttpResponse = 
 record {
   body: blob;
   headers: vec HeaderField;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
 };
type HttpRequest = 
 record {
   body: blob;
   headers: vec HeaderField;
   method: text;
   url: text;
 };
type HeaderField = 
 record {
   text;
   text;
 };
type FileCreateError = 
 variant {
   alreadyExists: File;
   illegalCharacters;
   parentNotFound;
 };
type File = 
 record {
   bucketId: BucketId;
   createdAt: Time;
   encrypted: bool;
   fileSize: nat;
   id: ID__1;
   name: text;
   parentId: opt ID__1;
   path: text;
   thumbnail: opt ID__1;
   updatedAt: Time;
 };
type CommitUploadError = 
 variant {
   addFile: FileCreateError;
   batchExpired;
   batchNotFound;
   chunkNotFound: nat32;
   chunkWrongBatch: nat32;
   "empty";
 };
type CommitBatch = 
 record {
   batchId: nat;
   chunkIds: vec nat32;
   headers: vec HeaderField;
 };
type Chunk = 
 record {
   batchId: nat;
   content: blob;
   encrypted: bool;
 };
type BucketId = principal;
type AssetKey = 
 record {
   encrypted: bool;
   fileSize: nat;
   id: ID;
   name: text;
   parentId: opt ID;
   sha256: opt blob;
   thumbnail: opt ID__1;
 };
type AssetInfo = 
 record {
   chunkIds: vec nat32;
   contentType: opt text;
   totalLength: nat;
 };
service : (principal) -> Storage
