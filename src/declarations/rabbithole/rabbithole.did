type UsernameError__1 = 
 variant {
   alreadyExists;
   illegalCharacters;
   maxLength;
   minLength;
 };
type UsernameError = 
 variant {
   alreadyExists;
   illegalCharacters;
   maxLength;
   minLength;
 };
type UserShare = 
 record {
   bucketId: principal;
   profile: Profile;
 };
type TransferError = 
 variant {
   BadFee: record {expected_fee: Tokens;};
   InsufficientFunds: record {balance: Tokens;};
   TxCreatedInFuture;
   TxDuplicate: record {duplicate_of: BlockIndex__1;};
   TxTooOld: record {allowed_window_nanos: nat64;};
 };
type Tokens = record {e8s: nat64;};
type Time = int;
type SharedFile = 
 record {
   createdAt: Time;
   downloads: nat;
   id: ID__1;
   journalId: BucketId;
   limitDownloads: opt nat;
   owner: principal;
   sharedWith: variant {
                 everyone;
                 users: vec principal;
               };
   storageId: BucketId;
   timelock: opt Time;
   updatedAt: Time;
 };
type Result_5 = 
 variant {
   err: UsernameError__1;
   ok;
 };
type Result_4 = 
 variant {
   err:
    variant {
      notFound;
      notify: NotifyError;
      transfer: TransferError;
      wrongStage;
    };
   ok;
 };
type Result_3 = 
 variant {
   err: ProfileCreateError;
   ok;
 };
type Result_2 = 
 variant {
   err: InviteDeleteError;
   ok;
 };
type Result_1 = 
 variant {
   err: variant {notFound;};
   ok;
 };
type Result = 
 variant {
   err: InviteError;
   ok;
 };
type RegistrationMode = 
 variant {
   invite;
   prepaid;
 };
type PublicKey = text;
type ProfileUpdateV2 = 
 record {
   avatarUrl: opt text;
   displayName: text;
 };
type ProfileInfoV2 = 
 record {
   avatarUrl: opt text;
   createdAt: Time;
   displayName: text;
   id: principal;
   inviter: opt principal;
   updatedAt: Time;
   username: text;
 };
type ProfileCreateV2 = 
 record {
   avatarUrl: opt text;
   displayName: text;
   username: text;
 };
type ProfileCreateError = 
 variant {
   alreadyExists;
   journalNotFound;
   username: UsernameError;
 };
type Profile = 
 record {
   avatarUrl: opt text;
   displayName: text;
   "principal": principal;
   username: text;
 };
type NotifyError = 
 variant {
   InvalidTransaction: text;
   Other: record {
            error_code: nat64;
            error_message: text;
          };
   Processing;
   Refunded: record {
               block_index: opt BlockIndex;
               reason: text;
             };
   TransactionTooOld: BlockIndex;
 };
type NotifyCreateCanisterArg = 
 record {
   block_index: BlockIndex;
   controller: principal;
   subnet_type: opt text;
 };
type InvoiceStage = 
 variant {
   active;
   complete: principal;
   createCanister: Tokens;
   installJournal: principal;
   notifyCanister: NotifyCreateCanisterArg;
   paid;
   transferUnusedFunds: principal;
 };
type Invoice = 
 record {
   amount: Tokens;
   createdAt: Time;
   expiredAt: Time;
   id: ID__2;
   owner: principal;
   stage: InvoiceStage;
   timerId: opt nat;
 };
type InviteError = 
 variant {
   alreadyUsed;
   expired;
   notFound;
 };
type InviteDeleteError = 
 variant {
   alreadyUsed: principal;
   expired;
   notFound;
   notPermission;
 };
type InviteCreate = 
 record {
   cycles: nat;
   expiredAt: Time;
   owner: principal;
 };
type Invite = 
 record {
   canisterId: principal;
   createdAt: Time;
   cycles: nat;
   expiredAt: Time;
   id: ID__2;
   owner: principal;
   status: variant {
             active;
             expired;
             used: principal;
           };
 };
type ID__2 = text;
type ID__1 = text;
type ID = text;
type EncryptedKey = text;
type BucketId__1 = principal;
type BucketId = principal;
type BlockIndex__1 = nat64;
type BlockIndex = nat64;
type AccountIdentifier = blob;
service : {
  accountBalance: () -> (Tokens);
  accountIdentifier: () -> (AccountIdentifier) query;
  canInvite: () -> (bool) query;
  checkInvite: (ID) -> (Result) query;
  checkUsername: (text) -> (Result_5) query;
  checkUsernameAvailability: (text) -> (bool) query;
  createAdminInvite: () -> (text);
  createInvite: (InviteCreate) -> ();
  createInvoice: () -> (Invoice);
  createJournal: (ID) -> (Result_4);
  createProfile: (ProfileCreateV2) -> (Result_3);
  deleteInvite: (ID) -> (Result_2);
  deleteInvoice: () -> ();
  deleteProfile: () -> (Result_1);
  getInvites: () -> (vec Invite) query;
  getInvoice: () -> (opt Invoice) query;
  getJournalBucket: () -> (opt BucketId__1);
  getKey: (PublicKey) -> (EncryptedKey) query;
  getProfile: () -> (opt ProfileInfoV2) query;
  getRegistrationMode: () -> (RegistrationMode) query;
  installCode:
   (record {
      arg: blob;
      canister_id: principal;
      mode: variant {
              install;
              reinstall;
              upgrade;
            };
      wasm_module: blob;
    }) -> ();
  listBuckets: (text) -> (vec record {
                                principal;
                                BucketId__1;
                              });
  listProfiles: () -> (vec Profile) query;
  putProfile: (ProfileUpdateV2) -> (Result_1);
  redeemInvite: (ID) -> (Result);
  setRegistrationMode: (RegistrationMode) -> ();
  shareFile: (ID, SharedFile) -> ();
  sharedWithMe: () -> (vec UserShare) query;
  unshareFile: (ID) -> ();
  upgradeJournalBuckets: () -> ();
}
